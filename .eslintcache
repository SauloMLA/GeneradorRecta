[{"C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\index.js":"1","C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\App.js":"2","C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\components\\Formulario.jsx":"3","C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\components\\Cita.jsx":"4","C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\index.js":"5","C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\App.js":"6","C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\components\\Formulario.jsx":"7","C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\components\\Recta.jsx":"8"},{"size":222,"mtime":1610580997015,"results":"9","hashOfConfig":"10"},{"size":1946,"mtime":1610646311397,"results":"11","hashOfConfig":"10"},{"size":3367,"mtime":1610646404273,"results":"12","hashOfConfig":"10"},{"size":653,"mtime":1610646248425,"results":"13","hashOfConfig":"10"},{"size":248,"mtime":1612991150912,"results":"14","hashOfConfig":"15"},{"size":2013,"mtime":1612928981715,"results":"16","hashOfConfig":"15"},{"size":3476,"mtime":1612928996648,"results":"17","hashOfConfig":"15"},{"size":4689,"mtime":1612991159408,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"ve0338",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"tlzz4o",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\index.js",[],["39","40"],"C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\App.js",[],"C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\components\\Formulario.jsx",["41"],"import React, {Fragment, useState} from 'react'\r\nimport { v4 as uuidv4, v4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    //Crear State de Citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n\r\n    });\r\n    const [error, actualizarError] = useState(false)\r\n    //Funcion que se ejecuta cada vez que el usuario escribe\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    //Extraer los valores\r\n\r\n    const { mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    //Cuando se envia el form\r\n    const submitCita = e =>{\r\n        e.preventDefault();\r\n\r\n        //Validar\r\n        if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            console.log('Hay un error')\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n    \r\n        //Eliminar el mensaje previo\r\n        actualizarError(false);\r\n        \r\n        //Asignar un ID\r\n        cita.id = v4();\r\n        console.log(cita);\r\n\r\n        //Crear la Cita\r\n        crearCita(cita);\r\n\r\n        //Reiniciar el form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n    }\r\n    return (  \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            {error ? <p className=\"alerta-error\">Todos los cambios son Obligatorios</p> : null}\r\n            <form onSubmit={submitCita}>\r\n                <label htmlFor=\"\">Nombre Mascota</label>\r\n                <input \r\n                type=\"text\"\r\n                name=\"mascota\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre Mascota\"\r\n                onChange={actualizarState}\r\n                value={mascota}\r\n                />\r\n                 <label htmlFor=\"\">Nombre Dueño</label>\r\n                <input \r\n                type=\"text\"\r\n                name=\"propietario\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre Dueño\"\r\n                 onChange={actualizarState}\r\n                 value={propietario}\r\n                 />\r\n                  <label htmlFor=\"\">Fecha</label>\r\n                <input \r\n                type=\"date\"\r\n                name=\"fecha\"\r\n                className=\"u-full-width\"\r\n                 onChange={actualizarState}\r\n                 value={fecha}\r\n                 />\r\n                   <label htmlFor=\"\">Hora</label>\r\n                <input \r\n                type=\"time\"\r\n                name=\"hora\"\r\n                className=\"u-full-width\"\r\n                 onChange={actualizarState}\r\n                 value={hora}\r\n                 />\r\n                <label htmlFor=\"\">Sintomas</label>\r\n                <textarea name=\"sintomas\" id=\"\" className=\"u-full-width\"  onChange={actualizarState} value={sintomas}></textarea>\r\n                <button type=\"submit\" className=\"u-full-width button-primary\">Agregar Cita</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\nexport default Formulario;","C:\\Users\\ACER\\Documents\\Visual Studio Code\\LearningWayWorks\\Udemy-React\\Citas\\citas\\src\\components\\Cita.jsx",[],"C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\index.js",[],["42","43"],"C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\App.js",[],"C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\components\\Formulario.jsx",["44"],"import React, {Fragment, useState} from 'react'\r\nimport { v4 as uuidv4, v4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita, eliminarCita}) => {\r\n    //Crear State de Citas\r\n    const [resultado, actualizarResultado] = useState({\r\n        puntoX1: '',\r\n        puntoY1: '',\r\n        puntoX2: '',\r\n        puntoY2: ''\r\n\r\n    });\r\n    const [error, actualizarError] = useState(false)\r\n    //Funcion que se ejecuta cada vez que el usuario escribe\r\n    const actualizarState = e => {\r\n        actualizarResultado({\r\n            ...resultado,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    //Extraer los valores\r\n\r\n    const { puntoX1, puntoX2, puntoY1, puntoY2} = resultado;\r\n\r\n    //Cuando se envia el form\r\n    const submitCita = e =>{\r\n        e.preventDefault();\r\n\r\n        //Validar\r\n        if (puntoX1.trim() === '' || puntoY1.trim() === '' || puntoX2.trim() === '' || puntoY2.trim() === ''  ) {\r\n            console.log('Hay un error')\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n    \r\n        //Eliminar el mensaje previo\r\n        actualizarError(false);\r\n        \r\n        //Asignar un ID\r\n        resultado.id = v4();\r\n\r\n        //Crear la Cita\r\n        \r\n        crearCita(resultado);\r\n\r\n        //Reiniciar el form\r\n        actualizarResultado({\r\n            puntoX1: '',\r\n            puntoY1: '',\r\n            puntoX2: '',\r\n            puntoY2: ''\r\n        })\r\n    }\r\n    return (  \r\n        <Fragment>\r\n            <h2>Datos</h2>\r\n            {error ? <p className=\"alerta-error\">Todos los cambios son Obligatorios</p> : null}\r\n            <form onSubmit={submitCita}>\r\n                <label htmlFor=\"\" className=\"s1rem\">Calcular</label>\r\n                <label>Ecuacion (Y = mx + b)</label>\r\n                <div className=\"row\">\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"puntoX1\"\r\n                    className=\"one-half column\"\r\n                    placeholder=\"m=\"\r\n                    onChange={actualizarState}\r\n                    value={puntoX1}\r\n                    />\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"puntoY1\"\r\n                    className=\"one-half column\"\r\n                    placeholder=\"b=\"\r\n                    onChange={actualizarState}\r\n                    value={puntoY1}\r\n                    />\r\n                </div> \r\n                <label htmlFor=\"\" className=\"s1rem\">Punto por el que pasa\r\n                </label>\r\n                <label>Punto 1</label>\r\n                <div className=\"row\">\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"puntoX2\"\r\n                    class=\"one-half column\"\r\n                    placeholder=\"X=\"\r\n                    onChange={actualizarState}\r\n                    value={puntoX2}\r\n                    />\r\n                    <input \r\n                    type=\"text\"\r\n                    name=\"puntoY2\"\r\n                    class=\"one-half column\"\r\n                    placeholder=\"Y=\"\r\n                    onChange={actualizarState}\r\n                    value={puntoY2}\r\n                    />\r\n                 </div>\r\n                <button type=\"submit\" className=\"u-full-width button-primary\">Calcular</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\nexport default Formulario;","C:\\Users\\ACER\\Documents\\Visual Studio Code\\MyWorkOnline\\GeneradorDeRectas\\src\\components\\Recta.jsx",["45","46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":16,"nodeType":"54","messageId":"55","endLine":2,"endColumn":22},{"ruleId":"48","replacedBy":"56"},{"ruleId":"50","replacedBy":"57"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":16,"nodeType":"54","messageId":"55","endLine":2,"endColumn":22},{"ruleId":"52","severity":1,"message":"58","line":5,"column":30,"nodeType":"54","messageId":"55","endLine":5,"endColumn":37},{"ruleId":"52","severity":1,"message":"59","line":35,"column":9,"nodeType":"54","messageId":"55","endLine":35,"endColumn":21},{"ruleId":"60","severity":1,"message":"61","line":50,"column":29,"nodeType":"62","messageId":"63","endLine":50,"endColumn":31},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'uuidv4' is defined but never used.","Identifier","unusedVar",["64"],["65"],"'puntoY1' is assigned a value but never used.","'restaMostrar' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]